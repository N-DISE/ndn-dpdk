---
# yamllint disable rule:line-length rule:truthy

name: build
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        compiler:
          - gcc-7
          - gcc-8
          - clang-8
      fail-fast: false
    env:
      CC: ${{ matrix.compiler }}
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: install compilers and tools
        run: |
          sudo apt-get update
          sudo apt-get install $CC clang-8 clang-format-8 doxygen gcc-multilib libelf-dev liburcu-dev linux-libc-dev
          go get honnef.co/go/tools/cmd/staticcheck
      - name: install uBPF
        run: |
          mkdir -p $HOME/ubpf
          cd $HOME/ubpf
          curl -sL https://github.com/iovisor/ubpf/archive/$UBPFCOMMIT.tar.gz | tar -xz --strip-components=1
          cd vm
          make
          sudo make install
        env:
          UBPFCOMMIT: 0014f298be3e2a636fd6243908238fb027527e28
      - uses: actions/cache@v2
        with:
          path: |
            ~/setup-dpdk
          key: ${{ matrix.compiler }}_DPDK2011_SPDK2010_20210401
      - uses: yoursunny/setup-dpdk@main
        with:
          dpdk-version: '20.11'
          spdk-version: '20.10'
      - uses: actions/checkout@v2
      - name: build NDN-DPDK in debug mode
        run: |
          npm install
          make
        env:
          NDNDPDK_MK_THREADSLEEP: 1
      - name: check code style
        run: |
          go get -t ./...
          make lint
          [[ $(git status --porcelain | tee >(cat 1>&2) | wc -l) -eq 0 ]]
      - name: run unit tests
        run: |
          MK_GOTEST_FILTER="/${TEST_ACCEPTABLE_FAILURES}/ d" make test
          MK_GOTEST_FILTER="/${TEST_ACCEPTABLE_FAILURES}/! d" make test || true
        env:
          TEST_ACCEPTABLE_FAILURES: diskstore|ethface|fetch|fwdp|memiftransport|tgconsumer|tgproducer
          NDNDPDK_MK_THREADSLEEP: 1
        if: ${{ matrix.compiler != 'gcc-8' }}
      - name: build documentation
        run: make doxygen
  docker:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            MAKE_ENV=NDNDPDK_MK_RELEASE=1
  library:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: install TinyGo
        run: |
          wget https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo_${TINYGO_VERSION}_amd64.deb
          sudo dpkg -i tinygo_${TINYGO_VERSION}_amd64.deb
        working-directory: /tmp
        env:
          TINYGO_VERSION: 0.17.0
      - uses: actions/checkout@v2
      - name: build for Linux without cgo
        run: |
          go build -v -o /dev/null ./ndn/...
          go build -v -o /dev/null ./cmd/ndndpdk-godemo
        env:
          CGO_ENABLED: 0
      - name: build for Windows without cgo
        run: |
          go build -v -o /dev/null ./ndn/...
        env:
          CGO_ENABLED: 0
          GOOS: windows
      - name: build with TinyGo
        run: |
          tinygo build -o /dev/null -target=wasm ./ndn/ndntestenv/tiny
