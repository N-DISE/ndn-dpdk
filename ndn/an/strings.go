// Code generated by "stringer -type=NackReason,TlvType -output=strings.go"; DO NOT EDIT.

package an

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NackNone-0]
	_ = x[NackCongestion-50]
	_ = x[NackDuplicate-100]
	_ = x[NackNoRoute-150]
	_ = x[NackUnspecified-255]
}

const (
	_NackReason_name_0 = "NackNone"
	_NackReason_name_1 = "NackCongestion"
	_NackReason_name_2 = "NackDuplicate"
	_NackReason_name_3 = "NackNoRoute"
	_NackReason_name_4 = "NackUnspecified"
)

func (i NackReason) String() string {
	switch {
	case i == 0:
		return _NackReason_name_0
	case i == 50:
		return _NackReason_name_1
	case i == 100:
		return _NackReason_name_2
	case i == 150:
		return _NackReason_name_3
	case i == 255:
		return _NackReason_name_4
	default:
		return "NackReason(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TtInvalid-0]
	_ = x[TtLpPacket-100]
	_ = x[TtLpPayload-80]
	_ = x[TtLpSeqNo-81]
	_ = x[TtFragIndex-82]
	_ = x[TtFragCount-83]
	_ = x[TtPitToken-98]
	_ = x[TtNack-800]
	_ = x[TtNackReason-801]
	_ = x[TtCongestionMark-832]
	_ = x[TtName-7]
	_ = x[TtGenericNameComponent-8]
	_ = x[TtImplicitSha256DigestComponent-1]
	_ = x[TtParametersSha256DigestComponent-2]
	_ = x[TtKeywordNameComponent-32]
	_ = x[TtSegmentNameComponent-33]
	_ = x[TtByteOffsetNameComponent-34]
	_ = x[TtVersionNameComponent-35]
	_ = x[TtTimestampNameComponent-36]
	_ = x[TtSequenceNumNameComponent-37]
	_ = x[TtInterest-5]
	_ = x[TtCanBePrefix-33]
	_ = x[TtMustBeFresh-18]
	_ = x[TtForwardingHint-30]
	_ = x[TtDelegation-31]
	_ = x[TtPreference-30]
	_ = x[TtNonce-10]
	_ = x[TtInterestLifetime-12]
	_ = x[TtHopLimit-34]
	_ = x[TtApplicationParameters-36]
	_ = x[TtInterestSignatureInfo-44]
	_ = x[TtInterestSignatureValue-46]
	_ = x[TtData-6]
	_ = x[TtMetaInfo-20]
	_ = x[TtContentType-24]
	_ = x[TtFreshnessPeriod-25]
	_ = x[TtFinalBlock-26]
	_ = x[TtContent-21]
	_ = x[TtSignatureInfo-22]
	_ = x[TtSignatureValue-23]
	_ = x[TtSignatureType-27]
	_ = x[TtKeyLocator-28]
	_ = x[TtKeyDigest-29]
	_ = x[TtSignatureNonce-38]
	_ = x[TtSignatureTime-40]
	_ = x[TtSignatureSeqNum-42]
}

const _TlvType_name = "TtInvalidTtImplicitSha256DigestComponentTtParametersSha256DigestComponentTtInterestTtDataTtNameTtGenericNameComponentTtNonceTtInterestLifetimeTtMustBeFreshTtMetaInfoTtContentTtSignatureInfoTtSignatureValueTtContentTypeTtFreshnessPeriodTtFinalBlockTtSignatureTypeTtKeyLocatorTtKeyDigestTtForwardingHintTtDelegationTtKeywordNameComponentTtSegmentNameComponentTtByteOffsetNameComponentTtVersionNameComponentTtTimestampNameComponentTtSequenceNumNameComponentTtSignatureNonceTtSignatureTimeTtSignatureSeqNumTtInterestSignatureInfoTtInterestSignatureValueTtLpPayloadTtLpSeqNoTtFragIndexTtFragCountTtPitTokenTtLpPacketTtNackTtNackReasonTtCongestionMark"

var _TlvType_map = map[TlvType]string{
	0:   _TlvType_name[0:9],
	1:   _TlvType_name[9:40],
	2:   _TlvType_name[40:73],
	5:   _TlvType_name[73:83],
	6:   _TlvType_name[83:89],
	7:   _TlvType_name[89:95],
	8:   _TlvType_name[95:117],
	10:  _TlvType_name[117:124],
	12:  _TlvType_name[124:142],
	18:  _TlvType_name[142:155],
	20:  _TlvType_name[155:165],
	21:  _TlvType_name[165:174],
	22:  _TlvType_name[174:189],
	23:  _TlvType_name[189:205],
	24:  _TlvType_name[205:218],
	25:  _TlvType_name[218:235],
	26:  _TlvType_name[235:247],
	27:  _TlvType_name[247:262],
	28:  _TlvType_name[262:274],
	29:  _TlvType_name[274:285],
	30:  _TlvType_name[285:301],
	31:  _TlvType_name[301:313],
	32:  _TlvType_name[313:335],
	33:  _TlvType_name[335:357],
	34:  _TlvType_name[357:382],
	35:  _TlvType_name[382:404],
	36:  _TlvType_name[404:428],
	37:  _TlvType_name[428:454],
	38:  _TlvType_name[454:470],
	40:  _TlvType_name[470:485],
	42:  _TlvType_name[485:502],
	44:  _TlvType_name[502:525],
	46:  _TlvType_name[525:549],
	80:  _TlvType_name[549:560],
	81:  _TlvType_name[560:569],
	82:  _TlvType_name[569:580],
	83:  _TlvType_name[580:591],
	98:  _TlvType_name[591:601],
	100: _TlvType_name[601:611],
	800: _TlvType_name[611:617],
	801: _TlvType_name[617:629],
	832: _TlvType_name[629:645],
}

func (i TlvType) String() string {
	if str, ok := _TlvType_map[i]; ok {
		return str
	}
	return "TlvType(" + strconv.FormatInt(int64(i), 10) + ")"
}
